@page "/post-message"
@implements IAsyncDisposable

@using Microsoft.AspNetCore.SignalR.Client

@using System.Threading
@using TheSwamp.Shared

@inject HttpClient Http

<div class="led-background">
    <h1>Post Message</h1>

    <p>Enter some text below & hit 'Post' to have it display on my noddy LED matrix</p>

    <div>
        <form @onsubmit="Post">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Send a message!" @bind="_message" @bind:event="oninput" />
                <div class="input-group-append">
                    <button class="btn btn-primary" type="submit" disabled="@(string.IsNullOrWhiteSpace(_message))">Post</button>
                </div>
            </div>
        </form>

        <div style="margin:10px;color:darkblue">
            @_result
        </div>
    </div>
</div>


<div style="margin:30px">
    @if (_values == null)
    {
        <div class="busy" />
    }
    else
    {
        <h3>Recent messages</h3>

        <div class="led_messages">
            @foreach (var m in _values.OrderByDescending(x => x.TimestampUtc))
            {
                <div class="led-message" style="transform: rotate(@CalculateTilt(m)deg);background-color:@CalculateColor(m)">
                    @m.Properties.StringValue("content")
                    <div>
                        <span>@m.TimestampUtc.ToLocalTime().ToString("dd MMM yyyy HH\\:mm")</span>
                    </div>
                </div>
            }
        </div>
    }
</div>


@code {
    private HubConnection hubConnection;

    private List<AgentMessage> _values;// = new List<AgentMessage>();
    private string _message = "Hello!!";
    private string _result = "";
    private Timer _timer;
    private string _status;
    private string[] _messageColors = new[] {
        "#f6f6a6",
        "#f6f6b6",
        "#f6f6c6",
        "#f6f6d6",
        "#f6f6e6",
        "#f6f6f6",
        "#f6a6f6",
        "#f6b6f6",
        "#f6c6f6",
        "#fef6d6",
        "#fdf6e6",
        "#fcf6f6",
        "#fba6f6",
        "#fab6f6",
        "#f6ffc6",
        "#f6fed6",
        "#f6fde6",
        "#f6fcf6",
        "#f6abf6",
        "#f6baf6",
    };

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl($"{Http.BaseAddress}api/hub")
            .Build();

        hubConnection.On<AgentMessage>("led-message", (message) =>
        {
            _values.Add(message);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await RefreshHistoryAsync();
    }


    private async Task RefreshHistoryAsync()
    {
        try
        {
            _status = "Loading recent messages";
            _values = await Http.GetFromJsonAsync<List<AgentMessage>>($"/api/agent/messages?type=led-matrix");
            _status = "";

            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            _status = ex.Message;
        }
    }


    private async Task Post()
    {
        var x = _message;
        _message = "";
        _result = "Sending message: '" + x + "'";

        await Http.PostAsJsonAsync($"/api/agent/messages", new AgentMessage()
        {
            Type = "led-matrix",
            Properties = new List<Property>()
            {
                new Property()
                {
                    Name = "content",
                    Value = x
                }
            }
        }, null);

        _result = "Sent message '" + x + "'";
    }


    private int CalculateTilt(AgentMessage m)
    {
        return (m.TimestampUtc.Second % 40) - 20;
    }

    private string CalculateColor(AgentMessage m)
    {
        var i = (m.TimestampUtc.Second % _messageColors.Count());
        return _messageColors[i];
    }

    public async ValueTask DisposeAsync()
    {
        if(hubConnection != null)
        {
            await hubConnection.DisposeAsync();            
        }
    }
}
