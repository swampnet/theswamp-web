@page "/post-message"
@implements IDisposable


@using System.Threading
@using TheSwamp.Shared

@inject HttpClient Http

<h1>Post Message</h1>

<p>Enter some text below & hit 'Post' to have it display on my noddy LCD matrix</p>

<form @onsubmit="Post">
    <div class="input-group">
        <input type="text" class="form-control" placeholder="Send a message!" @bind="_message" @bind:event="oninput" />
        <div class="input-group-append">
            <button class="btn btn-primary" type="submit" disabled="@(string.IsNullOrWhiteSpace(_message))">Post</button>
        </div>
    </div>
</form>

<div style="margin:10px;color:darkblue">
    @_result
</div>

<div style="margin:30px">
    @if (_values == null)
    {
        <img style="display:block;margin-left:auto;margin-right:auto;width:20%" src="img/Spin-1s-200px.svg" width="20" height="20" />
    }
    else
    {
        <h3>Recent messages</h3>

        <div class=led_messages>
            @foreach(var m in _values)
            {
                <div class="led-message" style="transform: rotate(@CalculateTilt(m)deg)">
                    @m.Properties.StringValue("content")                
                </div>
            }
        </div>
    }
</div>


@code {
    private AgentMessage[] _values;
    private string _message = "Hello!!";
    private string _result = "";
    private Timer _timer;
    private string _status;


    protected override void OnInitialized()
    {
        _timer = new Timer(new TimerCallback(async _ =>
        {
            await RefreshHistoryAsync();
        }), null, 0, 30000);
    }


    private async Task RefreshHistoryAsync()
    {
        try
        {
            _status = "Loading recent messages";
            _values = await Http.GetFromJsonAsync<AgentMessage[]>($"/api/agent/queue/led-matrix");
            _status = "";

            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            _status = ex.Message;
        }
    }


    private async Task Post()
    {
        var x = _message;
        _message = "";
        _result = "Sending message: '" + x + "'";

        await Http.PostAsJsonAsync($"/api/agent/queue", new AgentMessage()
        {
            Type = "led-matrix",
            Properties = new List<Property>()
        {
                new Property()
                {
                    Name = "content",
                    Value = x
                }
            }
        }, null);

        _result = "Sent message '" + x + "'";

        await RefreshHistoryAsync();
    }


    private int CalculateTilt(AgentMessage m)
    {
        return (m.TimestampUtc.Second % 40) - 20;
    }


    public void Dispose()
    {
        _timer?.Dispose();
    }
}
