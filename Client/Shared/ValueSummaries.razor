@using System.Threading
@using TheSwamp.Shared
@using Microsoft.AspNetCore.SignalR.Client

@implements IAsyncDisposable

@inject HttpClient Http

@if (_values == null)
{
    <div class="busy" />
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th width="80%">Name</th>
                <th width="20%">Value</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var val in _values.Where(v => v.LastUpdateOnUtc.HasValue))
            {
                <tr>
                    <td>
                        <a href="fetchdata/@val.Name">@val.Name</a>
                        <div style="font-size:x-small">@val.LastUpdateOnUtc.GetValueOrDefault().ToLocalTime().ToString("dd MMM yyyy HH\\:mm")</div>
                    </td>
                    <td>
                        <span>@val.LastValue</span>
                        @if (!string.IsNullOrWhiteSpace(val.Units))
                        {
                            <sup style="font-weight:bold;margin-left:5px">@val.Units</sup>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div style="font-size:x-small">update: @_lastUpdate.ToLocalTime().ToString("HH\\:mm\\:ss")</div>

@code {

    private HubConnection hubConnection;
    private DataSourceSummary[] _values;
    private DateTime _lastUpdate = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _values = await Http.GetFromJsonAsync<DataSourceSummary[]>($"/api/log/data");
            _lastUpdate = DateTime.Now;
            hubConnection = new HubConnectionBuilder()
                .WithUrl($"{Http.BaseAddress}api/hub")
                .Build();

            hubConnection.On<DataSourceSummary[]>("monitor-values", (values) =>
            {
                _values = values;
                _lastUpdate = DateTime.Now;

                StateHasChanged();
            });

            await hubConnection.StartAsync();

            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }


    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
