@page "/post-message"
@implements IAsyncDisposable

@using Microsoft.AspNetCore.SignalR.Client

@using System.Threading
@using TheSwamp.Shared

@inject HttpClient _http

<div class="led-background">
    <h1>Post Message</h1>

    <p>Enter some text below & hit 'Post' to have it display on my noddy LED matrix</p>

    <div>
        <form @onsubmit="Post">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Send a message!" @bind="_message" @bind:event="oninput" />
                <div class="input-group-append">
                    <button class="btn btn-primary" type="submit" disabled="@(string.IsNullOrWhiteSpace(_message))">Post</button>
                </div>
            </div>
        </form>

        <div style="margin:10px;color:darkblue">
            @_result
        </div>
    </div>
</div>


<div style="margin:30px">
    @if (_values == null)
    {
        <div class="busy" />
    }
    else
    {
        <h3>Recent messages</h3>
        @if (_showList)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Timestamp</th>
                        <th>Content</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var m in _values.OrderByDescending(x => x.TimestampUtc))
                    {
                        <tr>
                            <td>@m.TimestampUtc.ToLocalTime().ToString("dd/MM/yyyy HH\\:mm")</td>
                            <td>@m.Properties.StringValue("content")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="led_messages">
                @foreach (var m in _values.OrderByDescending(x => x.TimestampUtc))
                {
                    <div class="led-message" style="transform: rotate(@CalculateTilt(m)deg);background-color:@CalculateColor(m)">
                        @m.Properties.StringValue("content")
                        <div>
                            <span>@m.TimestampUtc.ToLocalTime().ToString("dd MMM yyyy HH\\:mm")</span>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>

<div class="selector">
    <input id="ShowList" type="checkbox" @bind-value="@_showList" />
    <label for="ShowList">Show List</label>
</div>


@code {
    private HubConnection _hubConnection;

    private bool _showList = false;
    private List<AgentMessage> _values;// = new List<AgentMessage>();
    private string _message = "Hello!!";
    private string _result = "";
    private string _status;
    private string[] _messageColors = new[] {
        "#F2E3CF", "#C0D8F6", "#D95B43", "#7FB3D5", "#B2BDCC", "#F9AA33", "#6699CC", "#FFEBEE", "#C9C9C9", "#F2F5F7", "#FBFBEF", "#EBEBEB", "#FCE8D6", 
        "#F2D1BF", "#F0E6EF", "#E0FFFF", "#D7F4FF", "#E5D1C0", "#F8F8F8", "#D7CFD8", "#C5E0B4", "#F5F5DC", "#FDF5E6", "#D2B48C", "#F2F8F8", "#EAF2D3", 
        "#E0EEE0", "#D8D8D8", "#FFF0F5", "#FFF8DC", "#FFF5EE", "#F9E0E3", "#F8F9FA", "#FAFAFA"    
    };

    private void ToggleView()
    {
        _showList = !_showList;
    }

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl($"{_http.BaseAddress}api/hub")
            .Build();

        _hubConnection.On<AgentMessage>("led-message", (message) =>
        {
            _values.Add(message);
            StateHasChanged();
        });

        _hubConnection.Closed += async (ex) =>
        {
            // reconnect on close?
            await _hubConnection.StartAsync();
        };

        await _hubConnection.StartAsync();
        await RefreshHistoryAsync();
    }


    private async Task RefreshHistoryAsync()
    {
        try
        {
            _status = "Loading recent messages";
            _values = await _http.GetFromJsonAsync<List<AgentMessage>>($"/api/agent/messages?type=led-matrix");
            _status = "";

            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            _status = ex.Message;
        }
    }


    private async Task Post()
    {
        var x = _message;
        _message = "";
        _result = "Sending message: '" + x + "'";

        await _http.PostAsJsonAsync(
            $"/api/agent/messages", 
            new AgentMessage()
            {
                Type = "led-matrix",
                Properties = new List<Property>()
                {
                    new Property()
                    {
                        Name = "content",
                        Value = x
                    }
                }
            });

        _result = "Sent message '" + x + "'";
    }

    private static Random _rnd = new Random();

    private int CalculateTilt(AgentMessage m)
    {
        return (_rnd.Next(60) % 50) - 25;
        //return (m.TimestampUtc.Second % 40) - 20;
    }

    private string CalculateColor(AgentMessage m)
    {
        var i = (_rnd.Next(60) % _messageColors.Count());
        //var i = (m.TimestampUtc.Second % _messageColors.Count());
        return _messageColors[i];
    }

    public async ValueTask DisposeAsync()
    {
        if(_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();            
        }
    }
}
