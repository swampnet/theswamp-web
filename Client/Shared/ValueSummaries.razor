@using System.Threading
@using TheSwamp.Shared
@using Microsoft.AspNetCore.SignalR.Client

@implements IAsyncDisposable

@inject HttpClient Http

@if (_values == null)
{
    <div class="busy" />
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th width="80%">Name</th>
                <th width="20%">Value</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var val in _values.Where(v => v.LastUpdateOnUtc.HasValue))
            {
                <tr>
                    <td>
                        <a href="fetchdata/@val.Name">@val.Name</a>
                        @if (!string.IsNullOrEmpty(val.Description))
                        {
                            <div style="font-size:smaller;font-style:italic">@val.Description</div>
                        }
                        <div style="font-size:x-small">@val.LastUpdateOnUtc.GetValueOrDefault().ToLocalTime().ToString("dd MMM yyyy HH\\:mm")</div>
                    </td>
                    <td>
                        <span>@val.LastValue</span>
                        @if (!string.IsNullOrWhiteSpace(val.Units))
                        {
                            <sup style="font-weight:bold;margin-left:5px">@val.Units</sup>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div style="font-size:x-small">update: @_lastUpdate.ToLocalTime().ToString("HH\\:mm\\:ss")</div>

<div class="dev">
    @foreach(var x in _log)
    {
        <div>[@x.Timestamp.ToString("HH\\:mm\\:ss")] @x.Message</div>
    }
</div>

@code {

    private HubConnection hubConnection;
    private DataSourceDetails[] _values;
    private DateTime _lastUpdate = DateTime.Now;
    private List<Loggy> _log = new List<Loggy>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _log.Add(new Loggy("OnInitializedAsync"));
            _values = await Http.GetFromJsonAsync<DataSourceDetails[]>($"/api/log/data");
            _log.Add(new Loggy("summary loaded"));
            _lastUpdate = DateTime.Now;
            hubConnection = new HubConnectionBuilder()
                .WithUrl($"{Http.BaseAddress}api/hub")
                .Build();

            hubConnection.On<DataSourceDetails[]>("monitor-values", (values) =>
            {
                _values = values;
                _lastUpdate = DateTime.Now;
                StateHasChanged();
            });
            hubConnection.Closed += OnClosed;
            hubConnection.Reconnected += OnReconnected;
            hubConnection.Reconnecting += OnReconnecting;

            await hubConnection.StartAsync();

            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }


    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            hubConnection.Closed -= OnClosed;
            hubConnection.Reconnected -= OnReconnected;
            hubConnection.Reconnecting -= OnReconnecting;

            await hubConnection.DisposeAsync();

            hubConnection = null;

            _log.Add(new Loggy("disposed"));
        }
    }

    private Task OnClosed(Exception ex)
    {
        _log.Add(new Loggy($"Hub - OnClosed: {ex?.Message}"));
        return Task.CompletedTask;
    }

    private Task OnReconnected(string s)
    {
        _log.Add(new Loggy($"Hub - OnReconnected: {s}"));
        return Task.CompletedTask;
    }

    private Task OnReconnecting(Exception ex)
    {
        _log.Add(new Loggy($"Hub - OnReconnecting: {ex?.Message}"));
        return Task.CompletedTask;
    }

}
